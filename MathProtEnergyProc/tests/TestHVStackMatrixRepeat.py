import numpy as np

from MathProtEnergyProc.DatasAugmentation import HVStackMatrixRepeat

import unittest


# Модульные тесты
class TestHVStackMatrixRepeat(unittest.TestCase):
    def setUp(self):
        # Выполнить настройку тестов (если необходимо)
        pass

    def tearDown(self):
        # Выполнить завершающие действия (если необходимо)
        pass

    # Модульные тесты
    def testHVStackMatrixRepeat1(self):
        # Исходные данные
        matrValues1_1 = [[1.1, 2.2, 5.5, 7.7],
                         [6.3, 2.3, 4.5, 5.5],
                         [2.7, 2.1, 3.3, 9.3],
                         [1.1, 5.4, 2.8, 1.1],
                         [7.8, 6.9, 1.2, 2.3]]
        matrValues1_2 = [[4.1, 3.2, 6.5],
                         [8.3, 4.3, 8.5],
                         [6.7, 5.1, 6.3]]
        matrValues1_3 = [[4.1, 3.2, 6.5],
                         [8.3, 4.3, 8.5],
                         [6.7, 5.1, 6.3],
                         [2.1, 1.2, 5.8],
                         [7.3, 2.3, 5.5],
                         [1.7, 4.1, 8.3],
                         [1.3, 9.2, 4.7],
                         [4.3, 1.3, 5.5],
                         [1.7, 9.1, 5.3],
                         [1.4, 7.2, 6.8],
                         [7.3, 2.3, 3.5],
                         [1.7, 2.1, 8.3],
                         [1.6, 1.2, 5.8],
                         [7.3, 2.9, 5.9],
                         [1.5, 4.1, 8.4]]
        matrValues1_4 = [4.9, 3.6]
        repeatValues1 = [True, False, True]
        matrValues2_1 = [[4.7, 5.3, 1.1, 6.1, 3.6, 6.9, 0.81, 2.1, 5.7, 3.3, 4.2],
                         [5.5, 2.3, 4.1, 3.1, 1.6, 5.9, 2.25, 3.5, 4.7, 8.3, 2.2],
                         [2.7, 2.3, 7.1, 9.1, 5.6, 2.9, 1.71, 1.1, 4.7, 7.3, 1.2]]
        repeatValues2 = []
        listsConcatedValues = [([matrValues1_1,  # Величины 1
                                 matrValues1_2,  # Величины 2
                                 matrValues1_3,  # Величины 3
                                 matrValues1_4  # Величины 4
                                 ], repeatValues1),
                               ([matrValues2_1  # Величины 1
                                 ], repeatValues2)]  # Списки массивов конкатенуемых данных величин
        Indexes = [3, 2, 0, 4, 1, 7, 5, 8, 6, 9, 10]

        # Преобразованные матрицы
        matrValuesRezEt = np.array([[1.1, 2.2, 5.5, 7.7, 4.1, 3.2,  6.5, 4.1, 3.2, 6.5, 4.9],
                                    [1.1, 2.2, 5.5, 7.7, 4.1, 3.2,  6.5, 4.1, 3.2, 6.5, 3.6],
                                    [1.1, 2.2, 5.5, 7.7, 8.3, 4.3,  8.5, 8.3, 4.3, 8.5, 4.9],
                                    [1.1, 2.2, 5.5, 7.7, 8.3, 4.3,  8.5, 8.3, 4.3, 8.5, 3.6],
                                    [1.1, 2.2, 5.5, 7.7, 6.7, 5.1,  6.3, 6.7, 5.1, 6.3, 4.9],
                                    [1.1, 2.2, 5.5, 7.7, 6.7, 5.1,  6.3, 6.7, 5.1, 6.3, 3.6],
                                    [6.3, 2.3, 4.5, 5.5, 4.1, 3.2,  6.5, 2.1, 1.2, 5.8, 4.9],
                                    [6.3, 2.3, 4.5, 5.5, 4.1, 3.2,  6.5, 2.1, 1.2, 5.8, 3.6],
                                    [6.3, 2.3, 4.5, 5.5, 8.3, 4.3,  8.5, 7.3, 2.3, 5.5, 4.9],
                                    [6.3, 2.3, 4.5, 5.5, 8.3, 4.3,  8.5, 7.3, 2.3, 5.5, 3.6],
                                    [6.3, 2.3, 4.5, 5.5, 6.7, 5.1,  6.3, 1.7, 4.1, 8.3, 4.9],
                                    [6.3, 2.3, 4.5, 5.5, 6.7, 5.1,  6.3, 1.7, 4.1, 8.3, 3.6],
                                    [2.7, 2.1, 3.3, 9.3, 4.1, 3.2,  6.5, 1.3, 9.2, 4.7, 4.9],
                                    [2.7, 2.1, 3.3, 9.3, 4.1, 3.2,  6.5, 1.3, 9.2, 4.7, 3.6],
                                    [2.7, 2.1, 3.3, 9.3, 8.3, 4.3,  8.5, 4.3, 1.3, 5.5, 4.9],
                                    [2.7, 2.1, 3.3, 9.3, 8.3, 4.3,  8.5, 4.3, 1.3, 5.5, 3.6],
                                    [2.7, 2.1, 3.3, 9.3, 6.7, 5.1,  6.3, 1.7, 9.1, 5.3, 4.9],
                                    [2.7, 2.1, 3.3, 9.3, 6.7, 5.1,  6.3, 1.7, 9.1, 5.3, 3.6],
                                    [1.1, 5.4, 2.8, 1.1, 4.1, 3.2,  6.5, 1.4, 7.2, 6.8, 4.9],
                                    [1.1, 5.4, 2.8, 1.1, 4.1, 3.2,  6.5, 1.4, 7.2, 6.8, 3.6],
                                    [1.1, 5.4, 2.8, 1.1, 8.3, 4.3,  8.5, 7.3, 2.3, 3.5, 4.9],
                                    [1.1, 5.4, 2.8, 1.1, 8.3, 4.3,  8.5, 7.3, 2.3, 3.5, 3.6],
                                    [1.1, 5.4, 2.8, 1.1, 6.7, 5.1,  6.3, 1.7, 2.1, 8.3, 4.9],
                                    [1.1, 5.4, 2.8, 1.1, 6.7, 5.1,  6.3, 1.7, 2.1, 8.3, 3.6],
                                    [7.8, 6.9, 1.2, 2.3, 4.1, 3.2,  6.5, 1.6, 1.2, 5.8, 4.9],
                                    [7.8, 6.9, 1.2, 2.3, 4.1, 3.2,  6.5, 1.6, 1.2, 5.8, 3.6],
                                    [7.8, 6.9, 1.2, 2.3, 8.3, 4.3,  8.5, 7.3, 2.9, 5.9, 4.9],
                                    [7.8, 6.9, 1.2, 2.3, 8.3, 4.3,  8.5, 7.3, 2.9, 5.9, 3.6],
                                    [7.8, 6.9, 1.2, 2.3, 6.7, 5.1,  6.3, 1.5, 4.1, 8.4, 4.9],
                                    [7.8, 6.9, 1.2, 2.3, 6.7, 5.1,  6.3, 1.5, 4.1, 8.4, 3.6],
                                    [4.7, 5.3, 1.1, 6.1, 3.6, 6.9, 0.81, 2.1, 5.7, 3.3, 4.2],
                                    [5.5, 2.3, 4.1, 3.1, 1.6, 5.9, 2.25, 3.5, 4.7, 8.3, 2.2],
                                    [2.7, 2.3, 7.1, 9.1, 5.6, 2.9, 1.71, 1.1, 4.7, 7.3, 1.2]])

        # Генерируем случайные данные
        matrValuesRez = HVStackMatrixRepeat(listsConcatedValues)

        # Проверяем значения
        dMatrValuesRez = np.max(np.abs(matrValuesRez - matrValuesRezEt))
        self.assertEqual(dMatrValuesRez, 0.0)

        # Генерируем случайные данные
        matrValuesRez = HVStackMatrixRepeat(listsConcatedValues,
                                            Indexes)

        # Проверяем значения
        dMatrValuesRez = np.max(np.abs(matrValuesRez - matrValuesRezEt[:, Indexes]))
        self.assertEqual(dMatrValuesRez, 0.0)

    def testHVStackMatrixRepeat2(self):
        # Исходные данные
        matrValues1_1 = [[1.1, 1.2, 4.5],
                         [5.3, 1.3, 3.5],
                         [1.7, 1.1, 1.3],
                         [2.1, 3.4, 1.8],
                         [4.8, 2.9, 0.2],
                         [3.7, 2.5, 6.2]]
        matrValues1_2 = [[3.1, 3.2, 6.5, 4.5, 5.6],
                         [8.3, 2.3, 8.5, 1.1, 7.7]]
        matrValues1_3 = [[3.1, 3.2],
                         [5.3, 1.3],
                         [3.1, 3.2],
                         [9.3, 7.3],
                         [3.1, 3.2],
                         [8.3, 2.3],
                         [3.1, 3.2],
                         [1.3, 9.3],
                         [3.1, 3.2],
                         [4.3, 2.3],
                         [3.1, 1.2],
                         [6.3, 2.3]]
        matrValues1_4 = [3.7, 2.2, 1.5]
        matrValues1_5 = [[3.4, 3.2, 4.2, 1.8],
                         [8.2, 1.3, 5.2, 4.8],
                         [4.3, 4.2, 7.3, 8.0],
                         [7.7, 7.3, 1.9, 1.7],
                         [2.4, 8.2, 4.1, 0.8],
                         [5.3, 1.6, 3.2, 1.9],
                         [4.1, 7.1, 9.2, 0.3],
                         [9.3, 1.8, 1.8, 1.2],
                         [1.1, 1.1, 1.2, 3.3],
                         [2.2, 2.9, 9.3, 4.5],
                         [3.7, 6.2, 0.2, 7.6],
                         [9.4, 8.3, 1.5, 8.8],
                         [3.4, 3.2, 4.2, 1.8],
                         [8.2, 1.3, 5.2, 4.8],
                         [4.3, 4.2, 7.3, 8.0],
                         [7.7, 7.3, 1.9, 1.7],
                         [2.4, 8.2, 4.1, 0.8],
                         [5.3, 1.6, 3.2, 1.9],
                         [4.1, 7.1, 9.2, 0.3],
                         [9.3, 1.8, 1.8, 1.2],
                         [1.1, 1.1, 1.2, 3.3],
                         [2.2, 2.9, 9.3, 4.5],
                         [3.7, 5.2, 0.2, 7.6],
                         [9.4, 8.3, 1.5, 8.8],
                         [3.4, 3.2, 4.2, 1.8],
                         [8.2, 1.3, 5.2, 4.8],
                         [4.3, 1.2, 7.3, 8.0],
                         [7.7, 7.3, 1.9, 1.7],
                         [2.4, 8.2, 4.1, 0.8],
                         [5.3, 1.6, 3.2, 1.9],
                         [4.1, 6.1, 9.2, 0.3],
                         [9.3, 1.8, 1.8, 0.2],
                         [1.1, 1.1, 1.2, 3.3],
                         [2.2, 2.9, 9.3, 4.5],
                         [3.7, 6.2, 0.2, 7.6],
                         [9.4, 8.3, 1.5, 8.8]]
        repeatValues1 = [True, False, True, False]
        matrValues2_1 = [[5.1, 3.1, 1.1, 3.7, 9.3, 1.0],
                         [1.6, 2.1, 7.7, 5.8, 1.2, 2.4],
                         [3.3, 4.2, 1.4, 2.5, 3.3, 3.3],
                         [4.1, 3.5, 2.3, 8.7, 5.6, 7.4],
                         [5.2, 7.2, 3.7, 4.5, 2.8, 6.1],
                         [6.3, 8.4, 1.2, 3.6, 8.9, 6.5],
                         [7.4, 9.0, 4.6, 6.7, 7.3, 3.4]]
        matrValues2_2 = [[1.3, 5.2, 6.7],
                         [1.2, 2.2, 4.7],
                         [8.6, 4.1, 3.7]]
        matrValues2_3 = [[2.3, 4.1],
                         [1.2, 2.4],
                         [4.3, 3.9],
                         [5.5, 5.6],
                         [7.7, 6.7],
                         [7.8, 8.4],
                         [4.3, 6.4],
                         [9.3, 6.1],
                         [0.3, 0.4],
                         [2.8, 1.4],
                         [0.9, 1.5],
                         [4.4, 3.7],
                         [8.1, 9.4],
                         [3.9, 0.5],
                         [4.9, 5.4],
                         [2.9, 5.2],
                         [3.8, 2.0],
                         [5.3, 9.1],
                         [1.4, 9.3],
                         [0.7, 0.1],
                         [4.5, 3.8]]
        matrValues2_4 = [[0.3, 1.2, 2.2, 4.5],
                         [7.3, 8.3, 5.3, 9.6]]
        repeatValues2 = [True, False, True]
        matrValues3_1 = [[1.1, 2.2, 5.5, 7.7, 10.1, 1.5, 2.4, 5.3, 7.9, 11.1],
                         [1.3, 3.6, 4.5, 8.7, 13.1, 1.6, 6.4, 2.3, 1.9, 12.3],
                         [3.3, 5.2, 7.5, 9.7, 16.1, 3.7, 8.4, 4.4, 4.8, 15.9]]
        matrValues3_2 = [[4.1, 3.2, 6.5, 6.7, 10.1],
                         [4.3, 4.6, 7.5, 8.7, 23.1],
                         [5.3, 8.2, 9.5, 8.4, 36.1]]
        repeatValues3 = [False]
        listsConcatedValues = [([matrValues1_1,  # Величины 1
                                 matrValues1_2,  # Величины 2
                                 matrValues1_3,  # Величины 3
                                 matrValues1_4,  # Величины 4
                                 matrValues1_5  # Величины 5
                                 ], repeatValues1),
                               ([matrValues2_1,  # Величины 1
                                 matrValues2_2,  # Величины 2
                                 matrValues2_3,  # Величины 3
                                 matrValues2_4  # Величины 4
                                 ], repeatValues2),
                               ([matrValues3_1,  # Величины 1
                                 matrValues3_2  # Величины 2
                                 ], repeatValues3)]  # Списки массивов конкатенуемых данных величин
        Indexes = [7, 3, 4, 0, 1, 5, 8, 9, 10, 12, 14]

        # Преобразованные матрицы
        matrValuesRezEt = np.array([[1.1, 1.2, 4.5, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 3.7, 3.4, 3.2, 4.2,  1.8],
                                    [1.1, 1.2, 4.5, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 2.2, 8.2, 1.3, 5.2,  4.8],
                                    [1.1, 1.2, 4.5, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 1.5, 4.3, 4.2, 7.3,  8.0],
                                    [1.1, 1.2, 4.5, 8.3,  2.3, 8.5, 1.1, 7.7, 5.3,  1.3, 3.7, 7.7, 7.3, 1.9,  1.7],
                                    [1.1, 1.2, 4.5, 8.3,  2.3, 8.5, 1.1, 7.7, 5.3,  1.3, 2.2, 2.4, 8.2, 4.1,  0.8],
                                    [1.1, 1.2, 4.5, 8.3,  2.3, 8.5, 1.1, 7.7, 5.3,  1.3, 1.5, 5.3, 1.6, 3.2,  1.9],
                                    [5.3, 1.3, 3.5, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 3.7, 4.1, 7.1, 9.2,  0.3],
                                    [5.3, 1.3, 3.5, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 2.2, 9.3, 1.8, 1.8,  1.2],
                                    [5.3, 1.3, 3.5, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 1.5, 1.1, 1.1, 1.2,  3.3],
                                    [5.3, 1.3, 3.5, 8.3,  2.3, 8.5, 1.1, 7.7, 9.3,  7.3, 3.7, 2.2, 2.9, 9.3,  4.5],
                                    [5.3, 1.3, 3.5, 8.3,  2.3, 8.5, 1.1, 7.7, 9.3,  7.3, 2.2, 3.7, 6.2, 0.2,  7.6],
                                    [5.3, 1.3, 3.5, 8.3,  2.3, 8.5, 1.1, 7.7, 9.3,  7.3, 1.5, 9.4, 8.3, 1.5,  8.8],
                                    [1.7, 1.1, 1.3, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 3.7, 3.4, 3.2, 4.2,  1.8],
                                    [1.7, 1.1, 1.3, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 2.2, 8.2, 1.3, 5.2,  4.8],
                                    [1.7, 1.1, 1.3, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 1.5, 4.3, 4.2, 7.3,  8.0],
                                    [1.7, 1.1, 1.3, 8.3,  2.3, 8.5, 1.1, 7.7, 8.3,  2.3, 3.7, 7.7, 7.3, 1.9,  1.7],
                                    [1.7, 1.1, 1.3, 8.3,  2.3, 8.5, 1.1, 7.7, 8.3,  2.3, 2.2, 2.4, 8.2, 4.1,  0.8],
                                    [1.7, 1.1, 1.3, 8.3,  2.3, 8.5, 1.1, 7.7, 8.3,  2.3, 1.5, 5.3, 1.6, 3.2,  1.9],
                                    [2.1, 3.4, 1.8, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 3.7, 4.1, 7.1, 9.2,  0.3],
                                    [2.1, 3.4, 1.8, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 2.2, 9.3, 1.8, 1.8,  1.2],
                                    [2.1, 3.4, 1.8, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 1.5, 1.1, 1.1, 1.2,  3.3],
                                    [2.1, 3.4, 1.8, 8.3,  2.3, 8.5, 1.1, 7.7, 1.3,  9.3, 3.7, 2.2, 2.9, 9.3,  4.5],
                                    [2.1, 3.4, 1.8, 8.3,  2.3, 8.5, 1.1, 7.7, 1.3,  9.3, 2.2, 3.7, 5.2, 0.2,  7.6],
                                    [2.1, 3.4, 1.8, 8.3,  2.3, 8.5, 1.1, 7.7, 1.3,  9.3, 1.5, 9.4, 8.3, 1.5,  8.8],
                                    [4.8, 2.9, 0.2, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 3.7, 3.4, 3.2, 4.2,  1.8],
                                    [4.8, 2.9, 0.2, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 2.2, 8.2, 1.3, 5.2,  4.8],
                                    [4.8, 2.9, 0.2, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  3.2, 1.5, 4.3, 1.2, 7.3,  8.0],
                                    [4.8, 2.9, 0.2, 8.3,  2.3, 8.5, 1.1, 7.7, 4.3,  2.3, 3.7, 7.7, 7.3, 1.9,  1.7],
                                    [4.8, 2.9, 0.2, 8.3,  2.3, 8.5, 1.1, 7.7, 4.3,  2.3, 2.2, 2.4, 8.2, 4.1,  0.8],
                                    [4.8, 2.9, 0.2, 8.3,  2.3, 8.5, 1.1, 7.7, 4.3,  2.3, 1.5, 5.3, 1.6, 3.2,  1.9],
                                    [3.7, 2.5, 6.2, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  1.2, 3.7, 4.1, 6.1, 9.2,  0.3],
                                    [3.7, 2.5, 6.2, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  1.2, 2.2, 9.3, 1.8, 1.8,  0.2],
                                    [3.7, 2.5, 6.2, 3.1,  3.2, 6.5, 4.5, 5.6, 3.1,  1.2, 1.5, 1.1, 1.1, 1.2,  3.3],
                                    [3.7, 2.5, 6.2, 8.3,  2.3, 8.5, 1.1, 7.7, 6.3,  2.3, 3.7, 2.2, 2.9, 9.3,  4.5],
                                    [3.7, 2.5, 6.2, 8.3,  2.3, 8.5, 1.1, 7.7, 6.3,  2.3, 2.2, 3.7, 6.2, 0.2,  7.6],
                                    [3.7, 2.5, 6.2, 8.3,  2.3, 8.5, 1.1, 7.7, 6.3,  2.3, 1.5, 9.4, 8.3, 1.5,  8.8],
                                    [5.1, 3.1, 1.1, 3.7,  9.3, 1.0, 1.3, 5.2, 6.7,  2.3, 4.1, 0.3, 1.2, 2.2,  4.5],
                                    [5.1, 3.1, 1.1, 3.7,  9.3, 1.0, 1.3, 5.2, 6.7,  2.3, 4.1, 7.3, 8.3, 5.3,  9.6],
                                    [5.1, 3.1, 1.1, 3.7,  9.3, 1.0, 1.2, 2.2, 4.7,  1.2, 2.4, 0.3, 1.2, 2.2,  4.5],
                                    [5.1, 3.1, 1.1, 3.7,  9.3, 1.0, 1.2, 2.2, 4.7,  1.2, 2.4, 7.3, 8.3, 5.3,  9.6],
                                    [5.1, 3.1, 1.1, 3.7,  9.3, 1.0, 8.6, 4.1, 3.7,  4.3, 3.9, 0.3, 1.2, 2.2,  4.5],
                                    [5.1, 3.1, 1.1, 3.7,  9.3, 1.0, 8.6, 4.1, 3.7,  4.3, 3.9, 7.3, 8.3, 5.3,  9.6],
                                    [1.6, 2.1, 7.7, 5.8,  1.2, 2.4, 1.3, 5.2, 6.7,  5.5, 5.6, 0.3, 1.2, 2.2,  4.5],
                                    [1.6, 2.1, 7.7, 5.8,  1.2, 2.4, 1.3, 5.2, 6.7,  5.5, 5.6, 7.3, 8.3, 5.3,  9.6],
                                    [1.6, 2.1, 7.7, 5.8,  1.2, 2.4, 1.2, 2.2, 4.7,  7.7, 6.7, 0.3, 1.2, 2.2,  4.5],
                                    [1.6, 2.1, 7.7, 5.8,  1.2, 2.4, 1.2, 2.2, 4.7,  7.7, 6.7, 7.3, 8.3, 5.3,  9.6],
                                    [1.6, 2.1, 7.7, 5.8,  1.2, 2.4, 8.6, 4.1, 3.7,  7.8, 8.4, 0.3, 1.2, 2.2,  4.5],
                                    [1.6, 2.1, 7.7, 5.8,  1.2, 2.4, 8.6, 4.1, 3.7,  7.8, 8.4, 7.3, 8.3, 5.3,  9.6],
                                    [3.3, 4.2, 1.4, 2.5,  3.3, 3.3, 1.3, 5.2, 6.7,  4.3, 6.4, 0.3, 1.2, 2.2,  4.5],
                                    [3.3, 4.2, 1.4, 2.5,  3.3, 3.3, 1.3, 5.2, 6.7,  4.3, 6.4, 7.3, 8.3, 5.3,  9.6],
                                    [3.3, 4.2, 1.4, 2.5,  3.3, 3.3, 1.2, 2.2, 4.7,  9.3, 6.1, 0.3, 1.2, 2.2,  4.5],
                                    [3.3, 4.2, 1.4, 2.5,  3.3, 3.3, 1.2, 2.2, 4.7,  9.3, 6.1, 7.3, 8.3, 5.3,  9.6],
                                    [3.3, 4.2, 1.4, 2.5,  3.3, 3.3, 8.6, 4.1, 3.7,  0.3, 0.4, 0.3, 1.2, 2.2,  4.5],
                                    [3.3, 4.2, 1.4, 2.5,  3.3, 3.3, 8.6, 4.1, 3.7,  0.3, 0.4, 7.3, 8.3, 5.3,  9.6],
                                    [4.1, 3.5, 2.3, 8.7,  5.6, 7.4, 1.3, 5.2, 6.7,  2.8, 1.4, 0.3, 1.2, 2.2,  4.5],
                                    [4.1, 3.5, 2.3, 8.7,  5.6, 7.4, 1.3, 5.2, 6.7,  2.8, 1.4, 7.3, 8.3, 5.3,  9.6],
                                    [4.1, 3.5, 2.3, 8.7,  5.6, 7.4, 1.2, 2.2, 4.7,  0.9, 1.5, 0.3, 1.2, 2.2,  4.5],
                                    [4.1, 3.5, 2.3, 8.7,  5.6, 7.4, 1.2, 2.2, 4.7,  0.9, 1.5, 7.3, 8.3, 5.3,  9.6],
                                    [4.1, 3.5, 2.3, 8.7,  5.6, 7.4, 8.6, 4.1, 3.7,  4.4, 3.7, 0.3, 1.2, 2.2,  4.5],
                                    [4.1, 3.5, 2.3, 8.7,  5.6, 7.4, 8.6, 4.1, 3.7,  4.4, 3.7, 7.3, 8.3, 5.3,  9.6],
                                    [5.2, 7.2, 3.7, 4.5,  2.8, 6.1, 1.3, 5.2, 6.7,  8.1, 9.4, 0.3, 1.2, 2.2,  4.5],
                                    [5.2, 7.2, 3.7, 4.5,  2.8, 6.1, 1.3, 5.2, 6.7,  8.1, 9.4, 7.3, 8.3, 5.3,  9.6],
                                    [5.2, 7.2, 3.7, 4.5,  2.8, 6.1, 1.2, 2.2, 4.7,  3.9, 0.5, 0.3, 1.2, 2.2,  4.5],
                                    [5.2, 7.2, 3.7, 4.5,  2.8, 6.1, 1.2, 2.2, 4.7,  3.9, 0.5, 7.3, 8.3, 5.3,  9.6],
                                    [5.2, 7.2, 3.7, 4.5,  2.8, 6.1, 8.6, 4.1, 3.7,  4.9, 5.4, 0.3, 1.2, 2.2,  4.5],
                                    [5.2, 7.2, 3.7, 4.5,  2.8, 6.1, 8.6, 4.1, 3.7,  4.9, 5.4, 7.3, 8.3, 5.3,  9.6],
                                    [6.3, 8.4, 1.2, 3.6,  8.9, 6.5, 1.3, 5.2, 6.7,  2.9, 5.2, 0.3, 1.2, 2.2,  4.5],
                                    [6.3, 8.4, 1.2, 3.6,  8.9, 6.5, 1.3, 5.2, 6.7,  2.9, 5.2, 7.3, 8.3, 5.3,  9.6],
                                    [6.3, 8.4, 1.2, 3.6,  8.9, 6.5, 1.2, 2.2, 4.7,  3.8, 2.0, 0.3, 1.2, 2.2,  4.5],
                                    [6.3, 8.4, 1.2, 3.6,  8.9, 6.5, 1.2, 2.2, 4.7,  3.8, 2.0, 7.3, 8.3, 5.3,  9.6],
                                    [6.3, 8.4, 1.2, 3.6,  8.9, 6.5, 8.6, 4.1, 3.7,  5.3, 9.1, 0.3, 1.2, 2.2,  4.5],
                                    [6.3, 8.4, 1.2, 3.6,  8.9, 6.5, 8.6, 4.1, 3.7,  5.3, 9.1, 7.3, 8.3, 5.3,  9.6],
                                    [7.4, 9.0, 4.6, 6.7,  7.3, 3.4, 1.3, 5.2, 6.7,  1.4, 9.3, 0.3, 1.2, 2.2,  4.5],
                                    [7.4, 9.0, 4.6, 6.7,  7.3, 3.4, 1.3, 5.2, 6.7,  1.4, 9.3, 7.3, 8.3, 5.3,  9.6],
                                    [7.4, 9.0, 4.6, 6.7,  7.3, 3.4, 1.2, 2.2, 4.7,  0.7, 0.1, 0.3, 1.2, 2.2,  4.5],
                                    [7.4, 9.0, 4.6, 6.7,  7.3, 3.4, 1.2, 2.2, 4.7,  0.7, 0.1, 7.3, 8.3, 5.3,  9.6],
                                    [7.4, 9.0, 4.6, 6.7,  7.3, 3.4, 8.6, 4.1, 3.7,  4.5, 3.8, 0.3, 1.2, 2.2,  4.5],
                                    [7.4, 9.0, 4.6, 6.7,  7.3, 3.4, 8.6, 4.1, 3.7,  4.5, 3.8, 7.3, 8.3, 5.3,  9.6],
                                    [1.1, 2.2, 5.5, 7.7, 10.1, 1.5, 2.4, 5.3, 7.9, 11.1, 4.1, 3.2, 6.5, 6.7, 10.1],
                                    [1.3, 3.6, 4.5, 8.7, 13.1, 1.6, 6.4, 2.3, 1.9, 12.3, 4.3, 4.6, 7.5, 8.7, 23.1],
                                    [3.3, 5.2, 7.5, 9.7, 16.1, 3.7, 8.4, 4.4, 4.8, 15.9, 5.3, 8.2, 9.5, 8.4, 36.1]])

        # Генерируем случайные данные
        matrValuesRez = HVStackMatrixRepeat(listsConcatedValues)

        # Проверяем значения
        dMatrValuesRez = np.max(np.abs(matrValuesRez - matrValuesRezEt))
        self.assertEqual(dMatrValuesRez, 0.0)

        # Генерируем случайные данные
        matrValuesRez = HVStackMatrixRepeat(listsConcatedValues,
                                            Indexes)

        # Проверяем значения
        dMatrValuesRez = np.max(np.abs(matrValuesRez - matrValuesRezEt[:, Indexes]))
        self.assertEqual(dMatrValuesRez, 0.0)

    def testHVStackMatrixRepeat3(self):
        # Исходные данные
        matrValues1 = [[3.1, 2.2, 5.5, 7.7, 10.1],
                       [5.1, 2.3, 4.5, 4.5, 11.3],
                       [3.5, 2.1, 3.3, 6.3, 13.5]]
        matrValues2 = [[4.7, 3.2],
                       [9.3, 4.3],
                       [7.7, 5.1],
                       [4.5, 3.4]]
        matrValues3 = [4.7, 3.2, 2.8]
        repeatValues = [True, True]
        listsConcatedValues = [([matrValues1,  # Величины 1
                                 matrValues2,  # Величины 2
                                 matrValues3  # Величины 3
                                 ], repeatValues)]  # Списки массивов конкатенуемых данных величин
        Indexes = [7, 3, 4, 0, 1, 5]

        # Преобразованные матрицы
        matrValuesRezEt = np.array([[3.1, 2.2, 5.5, 7.7, 10.1, 4.7, 3.2, 4.7],
                                    [3.1, 2.2, 5.5, 7.7, 10.1, 4.7, 3.2, 3.2],
                                    [3.1, 2.2, 5.5, 7.7, 10.1, 4.7, 3.2, 2.8],
                                    [3.1, 2.2, 5.5, 7.7, 10.1, 9.3, 4.3, 4.7],
                                    [3.1, 2.2, 5.5, 7.7, 10.1, 9.3, 4.3, 3.2],
                                    [3.1, 2.2, 5.5, 7.7, 10.1, 9.3, 4.3, 2.8],
                                    [3.1, 2.2, 5.5, 7.7, 10.1, 7.7, 5.1, 4.7],
                                    [3.1, 2.2, 5.5, 7.7, 10.1, 7.7, 5.1, 3.2],
                                    [3.1, 2.2, 5.5, 7.7, 10.1, 7.7, 5.1, 2.8],
                                    [3.1, 2.2, 5.5, 7.7, 10.1, 4.5, 3.4, 4.7],
                                    [3.1, 2.2, 5.5, 7.7, 10.1, 4.5, 3.4, 3.2],
                                    [3.1, 2.2, 5.5, 7.7, 10.1, 4.5, 3.4, 2.8],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 4.7, 3.2, 4.7],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 4.7, 3.2, 3.2],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 4.7, 3.2, 2.8],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 9.3, 4.3, 4.7],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 9.3, 4.3, 3.2],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 9.3, 4.3, 2.8],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 7.7, 5.1, 4.7],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 7.7, 5.1, 3.2],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 7.7, 5.1, 2.8],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 4.5, 3.4, 4.7],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 4.5, 3.4, 3.2],
                                    [5.1, 2.3, 4.5, 4.5, 11.3, 4.5, 3.4, 2.8],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 4.7, 3.2, 4.7],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 4.7, 3.2, 3.2],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 4.7, 3.2, 2.8],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 9.3, 4.3, 4.7],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 9.3, 4.3, 3.2],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 9.3, 4.3, 2.8],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 7.7, 5.1, 4.7],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 7.7, 5.1, 3.2],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 7.7, 5.1, 2.8],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 4.5, 3.4, 4.7],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 4.5, 3.4, 3.2],
                                    [3.5, 2.1, 3.3, 6.3, 13.5, 4.5, 3.4, 2.8]])

        # Генерируем случайные данные
        matrValuesRez = HVStackMatrixRepeat(listsConcatedValues)

        # Проверяем значения
        dMatrValuesRez = np.max(np.abs(matrValuesRez - matrValuesRezEt))
        self.assertEqual(dMatrValuesRez, 0.0)

        # Генерируем случайные данные
        matrValuesRez = HVStackMatrixRepeat(listsConcatedValues,
                                            Indexes)

        # Проверяем значения
        dMatrValuesRez = np.max(np.abs(matrValuesRez - matrValuesRezEt[:, Indexes]))
        self.assertEqual(dMatrValuesRez, 0.0)


# Запустить тестирование
if __name__ == "__main__":
    unittest.main()
