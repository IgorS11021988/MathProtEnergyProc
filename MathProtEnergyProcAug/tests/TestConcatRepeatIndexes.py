import numpy as np

from MathProtEnergyProc.IndexedNames import ConcatRepeatIndexes

import unittest


# Модульные тесты
class TestConcatRepeatIndexes(unittest.TestCase):
    def setUp(self):
        # Выполнить настройку тестов (если необходимо)
        pass

    def tearDown(self):
        # Выполнить завершающие действия (если необходимо)
        pass

    # Модульные тесты
    def testConcatRepeatIndexes1(self):
        # Исходные данные
        rangeIndexes1 = (0, 2, 1)
        rangeIndexes2 = (1, 7, 2)
        rangeIndexes3 = (2, 14, 3)
        listIndexesDiapasons = [rangeIndexes1,
                                rangeIndexes2,
                                rangeIndexes3]
        selectIndexes = [1, 2, 0]  # Индексы окончательного выбора

        # Полученные индексы
        IndexesEt = np.array([[0, 1,  2],
                              [0, 1,  5],
                              [0, 1,  8],
                              [0, 1, 11],
                              [0, 3,  2],
                              [0, 3,  5],
                              [0, 3,  8],
                              [0, 3, 11],
                              [0, 5,  2],
                              [0, 5,  5],
                              [0, 5,  8],
                              [0, 5, 11],
                              [1, 1,  2],
                              [1, 1,  5],
                              [1, 1,  8],
                              [1, 1, 11],
                              [1, 3,  2],
                              [1, 3,  5],
                              [1, 3,  8],
                              [1, 3, 11],
                              [1, 5,  2],
                              [1, 5,  5],
                              [1, 5,  8],
                              [1, 5, 11]])

        # Генерируем случайные данные
        Indexes = ConcatRepeatIndexes(listIndexesDiapasons  # Список диапазонов индексов
                                      )

        # Проверяем значения
        deltaIndexes = np.max(np.abs(Indexes - IndexesEt))
        self.assertEqual(deltaIndexes, 0.0)

        # Генерируем случайные данные
        Indexes = ConcatRepeatIndexes(listIndexesDiapasons,  # Список диапазонов индексов
                                      selectIndexes=selectIndexes  # Индексы окончательного выбора
                                      )

        # Проверяем значения
        deltaIndexes = np.max(np.abs(Indexes - IndexesEt[:, selectIndexes]))
        self.assertEqual(deltaIndexes, 0.0)

    def testConcatRepeatIndexes2(self):
        # Исходные данные
        rangeIndexes1 = (0, 5, 2)
        rangeIndexes2 = (1, 8, 3)
        rangeIndexes3 = (1, 7, 1)
        rangeIndexes4 = (3, 24, 5)
        listIndexesDiapasons = [rangeIndexes1,
                                rangeIndexes2,
                                rangeIndexes3,
                                rangeIndexes4]
        selectIndexes = [2, 3, 0]  # Индексы окончательного выбора

        # Полученные индексы
        IndexesEt = np.array([[0, 1, 1,  3],
                              [0, 1, 1,  8],
                              [0, 1, 1, 13],
                              [0, 1, 1, 18],
                              [0, 1, 1, 23],
                              [0, 1, 2,  3],
                              [0, 1, 2,  8],
                              [0, 1, 2, 13],
                              [0, 1, 2, 18],
                              [0, 1, 2, 23],
                              [0, 1, 3,  3],
                              [0, 1, 3,  8],
                              [0, 1, 3, 13],
                              [0, 1, 3, 18],
                              [0, 1, 3, 23],
                              [0, 1, 4,  3],
                              [0, 1, 4,  8],
                              [0, 1, 4, 13],
                              [0, 1, 4, 18],
                              [0, 1, 4, 23],
                              [0, 1, 5,  3],
                              [0, 1, 5,  8],
                              [0, 1, 5, 13],
                              [0, 1, 5, 18],
                              [0, 1, 5, 23],
                              [0, 1, 6,  3],
                              [0, 1, 6,  8],
                              [0, 1, 6, 13],
                              [0, 1, 6, 18],
                              [0, 1, 6, 23],
                              [0, 4, 1,  3],
                              [0, 4, 1,  8],
                              [0, 4, 1, 13],
                              [0, 4, 1, 18],
                              [0, 4, 1, 23],
                              [0, 4, 2,  3],
                              [0, 4, 2,  8],
                              [0, 4, 2, 13],
                              [0, 4, 2, 18],
                              [0, 4, 2, 23],
                              [0, 4, 3,  3],
                              [0, 4, 3,  8],
                              [0, 4, 3, 13],
                              [0, 4, 3, 18],
                              [0, 4, 3, 23],
                              [0, 4, 4,  3],
                              [0, 4, 4,  8],
                              [0, 4, 4, 13],
                              [0, 4, 4, 18],
                              [0, 4, 4, 23],
                              [0, 4, 5,  3],
                              [0, 4, 5,  8],
                              [0, 4, 5, 13],
                              [0, 4, 5, 18],
                              [0, 4, 5, 23],
                              [0, 4, 6,  3],
                              [0, 4, 6,  8],
                              [0, 4, 6, 13],
                              [0, 4, 6, 18],
                              [0, 4, 6, 23],
                              [0, 7, 1,  3],
                              [0, 7, 1,  8],
                              [0, 7, 1, 13],
                              [0, 7, 1, 18],
                              [0, 7, 1, 23],
                              [0, 7, 2,  3],
                              [0, 7, 2,  8],
                              [0, 7, 2, 13],
                              [0, 7, 2, 18],
                              [0, 7, 2, 23],
                              [0, 7, 3,  3],
                              [0, 7, 3,  8],
                              [0, 7, 3, 13],
                              [0, 7, 3, 18],
                              [0, 7, 3, 23],
                              [0, 7, 4,  3],
                              [0, 7, 4,  8],
                              [0, 7, 4, 13],
                              [0, 7, 4, 18],
                              [0, 7, 4, 23],
                              [0, 7, 5,  3],
                              [0, 7, 5,  8],
                              [0, 7, 5, 13],
                              [0, 7, 5, 18],
                              [0, 7, 5, 23],
                              [0, 7, 6,  3],
                              [0, 7, 6,  8],
                              [0, 7, 6, 13],
                              [0, 7, 6, 18],
                              [0, 7, 6, 23],
                              [2, 1, 1,  3],
                              [2, 1, 1,  8],
                              [2, 1, 1, 13],
                              [2, 1, 1, 18],
                              [2, 1, 1, 23],
                              [2, 1, 2,  3],
                              [2, 1, 2,  8],
                              [2, 1, 2, 13],
                              [2, 1, 2, 18],
                              [2, 1, 2, 23],
                              [2, 1, 3,  3],
                              [2, 1, 3,  8],
                              [2, 1, 3, 13],
                              [2, 1, 3, 18],
                              [2, 1, 3, 23],
                              [2, 1, 4,  3],
                              [2, 1, 4,  8],
                              [2, 1, 4, 13],
                              [2, 1, 4, 18],
                              [2, 1, 4, 23],
                              [2, 1, 5,  3],
                              [2, 1, 5,  8],
                              [2, 1, 5, 13],
                              [2, 1, 5, 18],
                              [2, 1, 5, 23],
                              [2, 1, 6,  3],
                              [2, 1, 6,  8],
                              [2, 1, 6, 13],
                              [2, 1, 6, 18],
                              [2, 1, 6, 23],
                              [2, 4, 1,  3],
                              [2, 4, 1,  8],
                              [2, 4, 1, 13],
                              [2, 4, 1, 18],
                              [2, 4, 1, 23],
                              [2, 4, 2,  3],
                              [2, 4, 2,  8],
                              [2, 4, 2, 13],
                              [2, 4, 2, 18],
                              [2, 4, 2, 23],
                              [2, 4, 3,  3],
                              [2, 4, 3,  8],
                              [2, 4, 3, 13],
                              [2, 4, 3, 18],
                              [2, 4, 3, 23],
                              [2, 4, 4,  3],
                              [2, 4, 4,  8],
                              [2, 4, 4, 13],
                              [2, 4, 4, 18],
                              [2, 4, 4, 23],
                              [2, 4, 5,  3],
                              [2, 4, 5,  8],
                              [2, 4, 5, 13],
                              [2, 4, 5, 18],
                              [2, 4, 5, 23],
                              [2, 4, 6,  3],
                              [2, 4, 6,  8],
                              [2, 4, 6, 13],
                              [2, 4, 6, 18],
                              [2, 4, 6, 23],
                              [2, 7, 1,  3],
                              [2, 7, 1,  8],
                              [2, 7, 1, 13],
                              [2, 7, 1, 18],
                              [2, 7, 1, 23],
                              [2, 7, 2,  3],
                              [2, 7, 2,  8],
                              [2, 7, 2, 13],
                              [2, 7, 2, 18],
                              [2, 7, 2, 23],
                              [2, 7, 3,  3],
                              [2, 7, 3,  8],
                              [2, 7, 3, 13],
                              [2, 7, 3, 18],
                              [2, 7, 3, 23],
                              [2, 7, 4,  3],
                              [2, 7, 4,  8],
                              [2, 7, 4, 13],
                              [2, 7, 4, 18],
                              [2, 7, 4, 23],
                              [2, 7, 5,  3],
                              [2, 7, 5,  8],
                              [2, 7, 5, 13],
                              [2, 7, 5, 18],
                              [2, 7, 5, 23],
                              [2, 7, 6,  3],
                              [2, 7, 6,  8],
                              [2, 7, 6, 13],
                              [2, 7, 6, 18],
                              [2, 7, 6, 23],
                              [4, 1, 1,  3],
                              [4, 1, 1,  8],
                              [4, 1, 1, 13],
                              [4, 1, 1, 18],
                              [4, 1, 1, 23],
                              [4, 1, 2,  3],
                              [4, 1, 2,  8],
                              [4, 1, 2, 13],
                              [4, 1, 2, 18],
                              [4, 1, 2, 23],
                              [4, 1, 3,  3],
                              [4, 1, 3,  8],
                              [4, 1, 3, 13],
                              [4, 1, 3, 18],
                              [4, 1, 3, 23],
                              [4, 1, 4,  3],
                              [4, 1, 4,  8],
                              [4, 1, 4, 13],
                              [4, 1, 4, 18],
                              [4, 1, 4, 23],
                              [4, 1, 5,  3],
                              [4, 1, 5,  8],
                              [4, 1, 5, 13],
                              [4, 1, 5, 18],
                              [4, 1, 5, 23],
                              [4, 1, 6,  3],
                              [4, 1, 6,  8],
                              [4, 1, 6, 13],
                              [4, 1, 6, 18],
                              [4, 1, 6, 23],
                              [4, 4, 1,  3],
                              [4, 4, 1,  8],
                              [4, 4, 1, 13],
                              [4, 4, 1, 18],
                              [4, 4, 1, 23],
                              [4, 4, 2,  3],
                              [4, 4, 2,  8],
                              [4, 4, 2, 13],
                              [4, 4, 2, 18],
                              [4, 4, 2, 23],
                              [4, 4, 3,  3],
                              [4, 4, 3,  8],
                              [4, 4, 3, 13],
                              [4, 4, 3, 18],
                              [4, 4, 3, 23],
                              [4, 4, 4,  3],
                              [4, 4, 4,  8],
                              [4, 4, 4, 13],
                              [4, 4, 4, 18],
                              [4, 4, 4, 23],
                              [4, 4, 5,  3],
                              [4, 4, 5,  8],
                              [4, 4, 5, 13],
                              [4, 4, 5, 18],
                              [4, 4, 5, 23],
                              [4, 4, 6,  3],
                              [4, 4, 6,  8],
                              [4, 4, 6, 13],
                              [4, 4, 6, 18],
                              [4, 4, 6, 23],
                              [4, 7, 1,  3],
                              [4, 7, 1,  8],
                              [4, 7, 1, 13],
                              [4, 7, 1, 18],
                              [4, 7, 1, 23],
                              [4, 7, 2,  3],
                              [4, 7, 2,  8],
                              [4, 7, 2, 13],
                              [4, 7, 2, 18],
                              [4, 7, 2, 23],
                              [4, 7, 3,  3],
                              [4, 7, 3,  8],
                              [4, 7, 3, 13],
                              [4, 7, 3, 18],
                              [4, 7, 3, 23],
                              [4, 7, 4,  3],
                              [4, 7, 4,  8],
                              [4, 7, 4, 13],
                              [4, 7, 4, 18],
                              [4, 7, 4, 23],
                              [4, 7, 5,  3],
                              [4, 7, 5,  8],
                              [4, 7, 5, 13],
                              [4, 7, 5, 18],
                              [4, 7, 5, 23],
                              [4, 7, 6,  3],
                              [4, 7, 6,  8],
                              [4, 7, 6, 13],
                              [4, 7, 6, 18],
                              [4, 7, 6, 23]])

        # Генерируем случайные данные
        Indexes = ConcatRepeatIndexes(listIndexesDiapasons  # Список диапазонов индексов
                                      )

        # Проверяем значения
        deltaIndexes = np.max(np.abs(Indexes - IndexesEt))
        self.assertEqual(deltaIndexes, 0.0)

        # Генерируем случайные данные
        Indexes = ConcatRepeatIndexes(listIndexesDiapasons,  # Список диапазонов индексов
                                      selectIndexes=selectIndexes  # Индексы окончательного выбора
                                      )

        # Проверяем значения
        deltaIndexes = np.max(np.abs(Indexes - IndexesEt[:, selectIndexes]))
        self.assertEqual(deltaIndexes, 0.0)

    def testConcatRepeatIndexes3(self):
        # Исходные данные
        rangeIndexes1 = (2, 9, 2)
        rangeIndexes2 = (1, 10, 4)
        listIndexesDiapasons = [rangeIndexes1,
                                rangeIndexes2]
        selectIndexes = [1, 0]  # Индексы окончательного выбора

        # Преобразованные матрицы
        IndexesEt = np.array([[2, 1],
                              [2, 5],
                              [2, 9],
                              [4, 1],
                              [4, 5],
                              [4, 9],
                              [6, 1],
                              [6, 5],
                              [6, 9],
                              [8, 1],
                              [8, 5],
                              [8, 9]])

        # Генерируем случайные данные
        Indexes = ConcatRepeatIndexes(listIndexesDiapasons  # Список диапазонов индексов
                                      )

        # Проверяем значения
        deltaIndexes = np.max(np.abs(Indexes - IndexesEt))
        self.assertEqual(deltaIndexes, 0.0)

        # Генерируем случайные данные
        Indexes = ConcatRepeatIndexes(listIndexesDiapasons,  # Список диапазонов индексов
                                      selectIndexes=selectIndexes  # Индексы окончательного выбора
                                      )

        # Проверяем значения
        deltaIndexes = np.max(np.abs(Indexes - IndexesEt[:, selectIndexes]))
        self.assertEqual(deltaIndexes, 0.0)


# Запустить тестирование
if __name__ == "__main__":
    unittest.main()
